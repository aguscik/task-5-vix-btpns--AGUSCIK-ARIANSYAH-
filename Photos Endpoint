package main

import (
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	_ "github.com/mattn/go-sqlite3"
)

// Photo struct untuk menyimpan data foto
type Photo struct {
	ID        int64     `json:"id"`
	Title     string    `json:"title"`
	Caption   string    `json:"caption"`
	PhotoURL  string    `json:"photo_url"`
	UserID    int64     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// DB struct untuk menyimpan koneksi ke database
type DB struct {
	conn *sql.DB
}

func main() {
	db, err := sql.Open("sqlite3", "./photos.db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	router := mux.NewRouter()

	// Mendaftarkan handler untuk endpoint create photo
	router.HandleFunc("/photos", createPhotoHandler(db)).Methods("POST")

	// Mendaftarkan handler untuk endpoint get photos
	router.HandleFunc("/photos", getPhotosHandler(db)).Methods("GET")

	// Mendaftarkan handler untuk endpoint update photo
	router.HandleFunc("/photos/{photoId}", updatePhotoHandler(db)).Methods("PUT")

	// Mendaftarkan handler untuk endpoint delete photo
	router.HandleFunc("/photos/{photoId}", deletePhotoHandler(db)).Methods("DELETE")

	log.Println("Server started on :8000")
	log.Fatal(http.ListenAndServe(":8000", router))
}

// Handler untuk endpoint create photo
func createPhotoHandler(db *DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var photo Photo
		err := json.NewDecoder(r.Body).Decode(&photo)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		// Validasi data
		if photo.ID == 0 || photo.Title == "" || photo.Caption == "" || photo.PhotoURL == "" || photo.UserID == 0 {
			http.Error(w, "ID, Title, Caption, PhotoURL, dan UserID harus diisi", http.StatusBadRequest)
			return
		}

		// Insert data ke database
		stmt, err := db.conn.Prepare(`
			INSERT INTO photos (id, title, caption, photo_url, user_id, created_at, updated_at)
			VALUES (?, ?, ?, ?, ?, ?, ?)
		`)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer stmt.Close()

		_, err = stmt.Exec(photo.ID, photo.Title, photo.Caption, photo.PhotoURL, photo.UserID, time.Now(), time.Now())
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		w.WriteHeader(http.StatusCreated)
	}
}

// Handler untuk endpoint get photos
func getPhotosHandler(db *DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Query data foto dari database
		rows, err := db.conn.Query("SELECT * FROM photos")
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var photos []Photo
		for rows.Next() {
			var photo Photo
			err := rows.Scan(&photo.ID, &photo.Title, &photo.Caption, &photo.PhotoURL, &photo.UserID, &photo.CreatedAt, &photo.UpdatedAt)
		
