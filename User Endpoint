package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "strconv"
    "time"

    "github.com/gorilla/mux"
)

// User model
type User struct {
    ID        int       `json:"id"`
    Username  string    `json:"username"`
    Email     string    `json:"email"`
    Password  string    `json:"password"`
    Photos    []Photo   `json:"photos,omitempty"`
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
}

// Photo model
type Photo struct {
    ID        int       `json:"id"`
    Title     string    `json:"title"`
    Caption   string    `json:"caption"`
    PhotoURL  string    `json:"photo_url"`
    UserID    int       `json:"user_id"`
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
}

// Users slice
var Users []User

// Photos slice
var Photos []Photo

// LoginResponse struct
type LoginResponse struct {
    Message string `json:"message"`
    Success bool   `json:"success"`
}

func main() {
    router := mux.NewRouter()

    // Users endpoints
    router.HandleFunc("/users/register", CreateUser).Methods("POST")
    router.HandleFunc("/users/login", LoginUser).Methods("GET")
    router.HandleFunc("/users/{id}", UpdateUser).Methods("PUT")
    router.HandleFunc("/users/{id}", DeleteUser).Methods("DELETE")

    // Photos endpoints
    router.HandleFunc("/photos", CreatePhoto).Methods("POST")
    router.HandleFunc("/photos", GetPhotos).Methods("GET")
    router.HandleFunc("/photos/{id}", UpdatePhoto).Methods("PUT")
    router.HandleFunc("/photos/{id}", DeletePhoto).Methods("DELETE")

    log.Fatal(http.ListenAndServe(":8000", router))
}

// CreateUser adds a new user
func CreateUser(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    var user User
    _ = json.NewDecoder(r.Body).Decode(&user)
    // Check if email already exists
    for _, u := range Users {
        if u.Email == user.Email {
            json.NewEncoder(w).Encode(LoginResponse{Message: "Email already exists", Success: false})
            return
        }
    }
    user.ID = len(Users) + 1
    user.CreatedAt = time.Now()
    user.UpdatedAt = time.Now()
    Users = append(Users, user)
    json.NewEncoder(w).Encode(user)
}

// LoginUser authenticates a user
func LoginUser(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    email := r.URL.Query().Get("email")
    password := r.URL.Query().Get("password")
    for _, user := range Users {
        if user.Email == email && user.Password == password {
            json.NewEncoder(w).Encode(LoginResponse{Message: "Login successful", Success: true})
            return
        }
    }
    json.NewEncoder(w).Encode(LoginResponse{Message: "Invalid credentials", Success: false})
}

// UpdateUser updates a user by ID
func UpdateUser(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    params := mux.Vars(r)
    id, _ := strconv.Atoi(params["id"])
    var updatedUser User
    _ = json.NewDecoder(r.Body
